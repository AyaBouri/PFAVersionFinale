// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PFAVersionFinale.Models;

#nullable disable

namespace PFAVersionFinale.Migrations
{
    [DbContext(typeof(MyContexte))]
    [Migration("20230713215206_PFAVersionFinale")]
    partial class PFAVersionFinale
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PFAVersionFinale.Models.ImgPub", b =>
                {
                    b.Property<int>("ImgPubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImgPubId"));

                    b.Property<string>("Chemin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImgPubId");

                    b.ToTable("ImgPubs");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Inscription", b =>
                {
                    b.Property<int>("InscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InscriptionId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepeatPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InscriptionId");

                    b.ToTable("Inscriptions");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnvoie")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Publication", b =>
                {
                    b.Property<int>("PublicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicationId"));

                    b.Property<DateTime>("DatePub")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImgPubId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypePublication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublicationId");

                    b.HasIndex("ImgPubId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("ClientId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OuvrierUserId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId");

                    b.HasIndex("OuvrierUserId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("DateDerniereConnection")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InscriptionId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("confirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Vote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteId"));

                    b.Property<int?>("ClientUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateVote")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteVote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VoteId");

                    b.HasIndex("ClientUserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("PublicationUser", b =>
                {
                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.Property<int>("publicationsPublicationId")
                        .HasColumnType("int");

                    b.HasKey("UsersUserId", "publicationsPublicationId");

                    b.HasIndex("publicationsPublicationId");

                    b.ToTable("PublicationUser");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Client", b =>
                {
                    b.HasBaseType("PFAVersionFinale.Models.User");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("PublicationId")
                        .HasColumnType("int");

                    b.Property<int>("VoteId")
                        .HasColumnType("int");

                    b.HasIndex("InscriptionId");

                    b.HasIndex("PublicationId");

                    b.ToTable("Users", t =>
                        {
                            t.Property("PublicationId")
                                .HasColumnName("Client_PublicationId");

                            t.Property("VoteId")
                                .HasColumnName("Client_VoteId");
                        });

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Ouvrier", b =>
                {
                    b.HasBaseType("PFAVersionFinale.Models.User");

                    b.Property<int>("OuvrierId")
                        .HasColumnType("int");

                    b.Property<int?>("PublicationId")
                        .HasColumnType("int");

                    b.Property<int>("VoteId")
                        .HasColumnType("int");

                    b.HasIndex("InscriptionId");

                    b.HasIndex("PublicationId");

                    b.HasIndex("VoteId");

                    b.HasDiscriminator().HasValue("Ouvrier");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.WebMaster", b =>
                {
                    b.HasBaseType("PFAVersionFinale.Models.User");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.Property<int>("WebMasterId")
                        .HasColumnType("int");

                    b.HasIndex("InscriptionId");

                    b.HasIndex("PublicationId");

                    b.ToTable("Users", t =>
                        {
                            t.Property("PublicationId")
                                .HasColumnName("WebMaster_PublicationId");
                        });

                    b.HasDiscriminator().HasValue("WebMaster");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Message", b =>
                {
                    b.HasOne("PFAVersionFinale.Models.User", "user")
                        .WithMany("messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Publication", b =>
                {
                    b.HasOne("PFAVersionFinale.Models.ImgPub", null)
                        .WithMany("publications")
                        .HasForeignKey("ImgPubId");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Review", b =>
                {
                    b.HasOne("PFAVersionFinale.Models.Client", "client")
                        .WithMany("reviews")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Service", b =>
                {
                    b.HasOne("PFAVersionFinale.Models.Ouvrier", null)
                        .WithMany("services")
                        .HasForeignKey("OuvrierUserId");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.User", b =>
                {
                    b.HasOne("PFAVersionFinale.Models.Service", null)
                        .WithMany("users")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Vote", b =>
                {
                    b.HasOne("PFAVersionFinale.Models.Client", null)
                        .WithMany("votes")
                        .HasForeignKey("ClientUserId");
                });

            modelBuilder.Entity("PublicationUser", b =>
                {
                    b.HasOne("PFAVersionFinale.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PFAVersionFinale.Models.Publication", null)
                        .WithMany()
                        .HasForeignKey("publicationsPublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Client", b =>
                {
                    b.HasOne("PFAVersionFinale.Models.Inscription", "inscription")
                        .WithMany("clients")
                        .HasForeignKey("InscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PFAVersionFinale.Models.Publication", null)
                        .WithMany("Clients")
                        .HasForeignKey("PublicationId");

                    b.Navigation("inscription");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Ouvrier", b =>
                {
                    b.HasOne("PFAVersionFinale.Models.Inscription", "inscription")
                        .WithMany("ouvriners")
                        .HasForeignKey("InscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PFAVersionFinale.Models.Publication", null)
                        .WithMany("Ouvrier")
                        .HasForeignKey("PublicationId");

                    b.HasOne("PFAVersionFinale.Models.Vote", "vote")
                        .WithMany()
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("inscription");

                    b.Navigation("vote");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.WebMaster", b =>
                {
                    b.HasOne("PFAVersionFinale.Models.Inscription", "inscription")
                        .WithMany()
                        .HasForeignKey("InscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PFAVersionFinale.Models.Publication", null)
                        .WithMany("WebMasters")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("inscription");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.ImgPub", b =>
                {
                    b.Navigation("publications");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Inscription", b =>
                {
                    b.Navigation("clients");

                    b.Navigation("ouvriners");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Publication", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Ouvrier");

                    b.Navigation("WebMasters");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Service", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.User", b =>
                {
                    b.Navigation("messages");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Client", b =>
                {
                    b.Navigation("reviews");

                    b.Navigation("votes");
                });

            modelBuilder.Entity("PFAVersionFinale.Models.Ouvrier", b =>
                {
                    b.Navigation("services");
                });
#pragma warning restore 612, 618
        }
    }
}
